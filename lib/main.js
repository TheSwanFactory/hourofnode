(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require=="function"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error("Cannot find module '"+o+"'");throw f.code="MODULE_NOT_FOUND",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require=="function"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({1:[function(require,module,exports){
var Item, bind, editor, items, main;

_.mixin(_.str.exports());

bind = rx.bind;

rxt.importTags();

Item = (function() {
  function Item(data) {
    this.data = rx.cell(data);
  }

  return Item;

})();

items = rx.array([new Item('Item the First'), new Item('Item the Second')]);

editor = function(opts) {
  var data, item, theForm;
  item = function() {
    return opts.item.get();
  };
  theForm = form([
    h2('Edit Item'), data = input({
      type: 'text',
      value: bind(function() {
        return item().data.get();
      })
    }), button('Update')
  ]);
  return theForm.submit(function() {
    opts.onSubmit(data.val().trim());
    return false;
  });
};

main = function() {
  var currentItem;
  currentItem = rx.cell(items.at(0));
  return $('body').append(div({
    "class": 'item-manager'
  }, [
    h1(bind(function() {
      return "" + (items.length()) + " Items";
    })), ul({
      "class": 'items'
    }, items.map(function(item) {
      return li({
        "class": 'item',
        init: function() {
          return _.defer((function(_this) {
            return function() {
              return _this.slideDown('fast');
            };
          })(this));
        }
      }, [
        span({
          "class": 'data'
        }, bind(function() {
          return "" + (item.data.get()) + " ";
        })), a({
          href: 'javascript: void 0',
          click: function() {
            return currentItem.set(item);
          }
        }, 'Edit')
      ]);
    })), button({
      click: function() {
        var title;
        title = "Item #" + (items.length() + 1);
        return items.push(new Item(title));
      }
    }, 'Add Item'), editor({
      item: bind(function() {
        return currentItem.get();
      }),
      onSubmit: function(data) {
        return currentItem.get().data.set(data);
      }
    })
  ]));
};

$(main);



},{}]},{},[1])
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi91c3IvbG9jYWwvbGliL25vZGVfbW9kdWxlcy9icm93c2VyaWZ5L25vZGVfbW9kdWxlcy9icm93c2VyLXBhY2svX3ByZWx1ZGUuanMiLCIvVXNlcnMvZHJlcm5pZS9Tb3VyY2UvaG91cm9mbm9kZS9zcmMvbWFpbi5jb2ZmZWUiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7QUNDQSxJQUFBLCtCQUFBOztBQUFBLENBQUMsQ0FBQyxLQUFGLENBQVEsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxPQUFOLENBQUEsQ0FBUixDQUFBLENBQUE7O0FBQUEsSUFDQSxHQUFPLEVBQUUsQ0FBQyxJQURWLENBQUE7O0FBQUEsR0FFRyxDQUFDLFVBQUosQ0FBQSxDQUZBLENBQUE7O0FBQUE7QUFPZSxFQUFBLGNBQUMsSUFBRCxHQUFBO0FBQ1gsSUFBQSxJQUFDLENBQUEsSUFBRCxHQUFRLEVBQUUsQ0FBQyxJQUFILENBQVEsSUFBUixDQUFSLENBRFc7RUFBQSxDQUFiOztjQUFBOztJQVBGLENBQUE7O0FBQUEsS0FVQSxHQUFRLEVBQUUsQ0FBQyxLQUFILENBQVMsQ0FDWCxJQUFBLElBQUEsQ0FBSyxnQkFBTCxDQURXLEVBRVgsSUFBQSxJQUFBLENBQUssaUJBQUwsQ0FGVyxDQUFULENBVlIsQ0FBQTs7QUFBQSxNQWlCQSxHQUFTLFNBQUMsSUFBRCxHQUFBO0FBQ1AsTUFBQSxtQkFBQTtBQUFBLEVBQUEsSUFBQSxHQUFPLFNBQUEsR0FBQTtXQUFHLElBQUksQ0FBQyxJQUFJLENBQUMsR0FBVixDQUFBLEVBQUg7RUFBQSxDQUFQLENBQUE7QUFBQSxFQUNBLE9BQUEsR0FBVSxJQUFBLENBQUs7SUFDYixFQUFBLENBQUcsV0FBSCxDQURhLEVBRWIsSUFBQSxHQUFPLEtBQUEsQ0FBTTtBQUFBLE1BQ1gsSUFBQSxFQUFNLE1BREs7QUFBQSxNQUVYLEtBQUEsRUFBTyxJQUFBLENBQUssU0FBQSxHQUFBO2VBQUcsSUFBQSxDQUFBLENBQU0sQ0FBQyxJQUFJLENBQUMsR0FBWixDQUFBLEVBQUg7TUFBQSxDQUFMLENBRkk7S0FBTixDQUZNLEVBTWIsTUFBQSxDQUFPLFFBQVAsQ0FOYTtHQUFMLENBRFYsQ0FBQTtTQVlBLE9BQU8sQ0FBQyxNQUFSLENBQWUsU0FBQSxHQUFBO0FBQ2IsSUFBQSxJQUFJLENBQUMsUUFBTCxDQUFjLElBQUksQ0FBQyxHQUFMLENBQUEsQ0FBVSxDQUFDLElBQVgsQ0FBQSxDQUFkLENBQUEsQ0FBQTtXQUNBLE1BRmE7RUFBQSxDQUFmLEVBYk87QUFBQSxDQWpCVCxDQUFBOztBQUFBLElBb0NBLEdBQU8sU0FBQSxHQUFBO0FBSUwsTUFBQSxXQUFBO0FBQUEsRUFBQSxXQUFBLEdBQWMsRUFBRSxDQUFDLElBQUgsQ0FBUSxLQUFLLENBQUMsRUFBTixDQUFTLENBQVQsQ0FBUixDQUFkLENBQUE7U0FFQSxDQUFBLENBQUUsTUFBRixDQUFTLENBQUMsTUFBVixDQUNFLEdBQUEsQ0FBSTtBQUFBLElBQUMsT0FBQSxFQUFPLGNBQVI7R0FBSixFQUE2QjtJQUMzQixFQUFBLENBQUcsSUFBQSxDQUFLLFNBQUEsR0FBQTthQUFHLEVBQUEsR0FBRSxDQUFDLEtBQUssQ0FBQyxNQUFOLENBQUEsQ0FBRCxDQUFGLEdBQWtCLFNBQXJCO0lBQUEsQ0FBTCxDQUFILENBRDJCLEVBSzNCLEVBQUEsQ0FBRztBQUFBLE1BQUMsT0FBQSxFQUFPLE9BQVI7S0FBSCxFQUFxQixLQUFLLENBQUMsR0FBTixDQUFVLFNBQUMsSUFBRCxHQUFBO2FBQzdCLEVBQUEsQ0FBRztBQUFBLFFBQ0QsT0FBQSxFQUFPLE1BRE47QUFBQSxRQUdELElBQUEsRUFBTSxTQUFBLEdBQUE7aUJBQUcsQ0FBQyxDQUFDLEtBQUYsQ0FBUSxDQUFBLFNBQUEsS0FBQSxHQUFBO21CQUFBLFNBQUEsR0FBQTtxQkFBRyxLQUFDLENBQUEsU0FBRCxDQUFXLE1BQVgsRUFBSDtZQUFBLEVBQUE7VUFBQSxDQUFBLENBQUEsQ0FBQSxJQUFBLENBQVIsRUFBSDtRQUFBLENBSEw7T0FBSCxFQUlHO1FBQ0QsSUFBQSxDQUFLO0FBQUEsVUFDSCxPQUFBLEVBQU8sTUFESjtTQUFMLEVBRUcsSUFBQSxDQUFLLFNBQUEsR0FBQTtpQkFBRyxFQUFBLEdBQUUsQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLEdBQVYsQ0FBQSxDQUFELENBQUYsR0FBbUIsSUFBdEI7UUFBQSxDQUFMLENBRkgsQ0FEQyxFQUlELENBQUEsQ0FBRTtBQUFBLFVBQ0EsSUFBQSxFQUFNLG9CQUROO0FBQUEsVUFFQSxLQUFBLEVBQU8sU0FBQSxHQUFBO21CQUFHLFdBQVcsQ0FBQyxHQUFaLENBQWdCLElBQWhCLEVBQUg7VUFBQSxDQUZQO1NBQUYsRUFHRyxNQUhILENBSkM7T0FKSCxFQUQ2QjtJQUFBLENBQVYsQ0FBckIsQ0FMMkIsRUFzQjNCLE1BQUEsQ0FBTztBQUFBLE1BQ0wsS0FBQSxFQUFPLFNBQUEsR0FBQTtBQUNMLFlBQUEsS0FBQTtBQUFBLFFBQUEsS0FBQSxHQUFTLFFBQUEsR0FBTyxDQUFDLEtBQUssQ0FBQyxNQUFOLENBQUEsQ0FBQSxHQUFlLENBQWhCLENBQWhCLENBQUE7ZUFDQSxLQUFLLENBQUMsSUFBTixDQUFlLElBQUEsSUFBQSxDQUFLLEtBQUwsQ0FBZixFQUZLO01BQUEsQ0FERjtLQUFQLEVBSUcsVUFKSCxDQXRCMkIsRUE4QjNCLE1BQUEsQ0FBTztBQUFBLE1BQ0wsSUFBQSxFQUFNLElBQUEsQ0FBSyxTQUFBLEdBQUE7ZUFBRyxXQUFXLENBQUMsR0FBWixDQUFBLEVBQUg7TUFBQSxDQUFMLENBREQ7QUFBQSxNQUVMLFFBQUEsRUFBVSxTQUFDLElBQUQsR0FBQTtlQUNSLFdBQVcsQ0FBQyxHQUFaLENBQUEsQ0FBaUIsQ0FBQyxJQUFJLENBQUMsR0FBdkIsQ0FBMkIsSUFBM0IsRUFEUTtNQUFBLENBRkw7S0FBUCxDQTlCMkI7R0FBN0IsQ0FERixFQU5LO0FBQUEsQ0FwQ1AsQ0FBQTs7QUFBQSxDQW1GQSxDQUFFLElBQUYsQ0FuRkEsQ0FBQSIsImZpbGUiOiJnZW5lcmF0ZWQuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlc0NvbnRlbnQiOlsiKGZ1bmN0aW9uIGUodCxuLHIpe2Z1bmN0aW9uIHMobyx1KXtpZighbltvXSl7aWYoIXRbb10pe3ZhciBhPXR5cGVvZiByZXF1aXJlPT1cImZ1bmN0aW9uXCImJnJlcXVpcmU7aWYoIXUmJmEpcmV0dXJuIGEobywhMCk7aWYoaSlyZXR1cm4gaShvLCEwKTt2YXIgZj1uZXcgRXJyb3IoXCJDYW5ub3QgZmluZCBtb2R1bGUgJ1wiK28rXCInXCIpO3Rocm93IGYuY29kZT1cIk1PRFVMRV9OT1RfRk9VTkRcIixmfXZhciBsPW5bb109e2V4cG9ydHM6e319O3Rbb11bMF0uY2FsbChsLmV4cG9ydHMsZnVuY3Rpb24oZSl7dmFyIG49dFtvXVsxXVtlXTtyZXR1cm4gcyhuP246ZSl9LGwsbC5leHBvcnRzLGUsdCxuLHIpfXJldHVybiBuW29dLmV4cG9ydHN9dmFyIGk9dHlwZW9mIHJlcXVpcmU9PVwiZnVuY3Rpb25cIiYmcmVxdWlyZTtmb3IodmFyIG89MDtvPHIubGVuZ3RoO28rKylzKHJbb10pO3JldHVybiBzfSkiLCIjIFByZWFtYmxlXG5fLm1peGluKF8uc3RyLmV4cG9ydHMoKSlcbmJpbmQgPSByeC5iaW5kXG5yeHQuaW1wb3J0VGFncygpXG5cbiMgRGF0YSBtb2RlbFxuXG5jbGFzcyBJdGVtXG4gIGNvbnN0cnVjdG9yOiAoZGF0YSkgLT5cbiAgICBAZGF0YSA9IHJ4LmNlbGwoZGF0YSlcblxuaXRlbXMgPSByeC5hcnJheShbXG4gIG5ldyBJdGVtKCdJdGVtIHRoZSBGaXJzdCcpXG4gIG5ldyBJdGVtKCdJdGVtIHRoZSBTZWNvbmQnKVxuXSlcblxuIyBHZW5lcmljIEVkaXRvciBjb21wb25lbnRcblxuZWRpdG9yID0gKG9wdHMpIC0+XG4gIGl0ZW0gPSAtPiBvcHRzLml0ZW0uZ2V0KClcbiAgdGhlRm9ybSA9IGZvcm0gW1xuICAgIGgyICdFZGl0IEl0ZW0nXG4gICAgZGF0YSA9IGlucHV0IHtcbiAgICAgIHR5cGU6ICd0ZXh0JyxcbiAgICAgIHZhbHVlOiBiaW5kIC0+IGl0ZW0oKS5kYXRhLmdldCgpXG4gICAgfVxuICAgIGJ1dHRvbiAnVXBkYXRlJ1xuICBdXG4gICMgVmFsaWRhdGUvbXVuZ2Ugc3VibWl0dGVkIGRhdGFcbiAgIyBXZSBjb3VsZCd2ZSBhbHNvIG1hZGUgdGhpcyBhIGBzdWJtaXRgXG4gICMgcHJvcGVydHkgb24gdGhlIGBmb3JtYCBlbGVtZW50IGFib3ZlXG4gIHRoZUZvcm0uc3VibWl0IC0+XG4gICAgb3B0cy5vblN1Ym1pdChkYXRhLnZhbCgpLnRyaW0oKSlcbiAgICBmYWxzZVxuXG4jIERlZmluZSBvdXIgbWFpbiB2aWV3XG5cbm1haW4gPSAtPlxuXG4gICMgUmVhY3RpdmUgY2VsbCB0byB0cmFjayBjdXJyZW50bHkgc2VsZWN0ZWQgaXRlbVxuICAjIERlZmF1bHQgaXMgdGhlIGZpcnN0IGl0ZW1cbiAgY3VycmVudEl0ZW0gPSByeC5jZWxsKGl0ZW1zLmF0KDApKSBcblxuICAkKCdib2R5JykuYXBwZW5kKFxuICAgIGRpdiB7Y2xhc3M6ICdpdGVtLW1hbmFnZXInfSwgW1xuICAgICAgaDEgYmluZCAtPiBcIiN7aXRlbXMubGVuZ3RoKCl9IEl0ZW1zXCJcbiAgICBcbiAgICAgICMgRGlzcGxheSBsaXN0IG9mIGV4aXN0aW5nIGl0ZW1zXG4gICAgICAgIFxuICAgICAgdWwge2NsYXNzOiAnaXRlbXMnfSwgaXRlbXMubWFwIChpdGVtKSAtPlxuICAgICAgICBsaSB7XG4gICAgICAgICAgY2xhc3M6ICdpdGVtJyAgICAgICAgICAgIFxuICAgICAgICAgICMgQW5pbWF0ZSBjcmVhdGlvbiB3aXRoIEpRdWVyeSBlZmZmZWN0XG4gICAgICAgICAgaW5pdDogLT4gXy5kZWZlciA9PiBAc2xpZGVEb3duKCdmYXN0JylcbiAgICAgICAgfSwgW1xuICAgICAgICAgIHNwYW4ge1xuICAgICAgICAgICAgY2xhc3M6ICdkYXRhJ1xuICAgICAgICAgIH0sIGJpbmQgLT4gXCIje2l0ZW0uZGF0YS5nZXQoKX0gXCJcbiAgICAgICAgICBhIHtcbiAgICAgICAgICAgIGhyZWY6ICdqYXZhc2NyaXB0OiB2b2lkIDAnXG4gICAgICAgICAgICBjbGljazogLT4gY3VycmVudEl0ZW0uc2V0KGl0ZW0pXG4gICAgICAgICAgfSwgJ0VkaXQnXG4gICAgICAgIF1cblxuICAgICAgIyBDcmVhdGUgYSBuZXcgaXRlbVxuICAgICAgIFxuICAgICAgYnV0dG9uIHtcbiAgICAgICAgY2xpY2s6IC0+XG4gICAgICAgICAgdGl0bGUgPSBcIkl0ZW0gIyN7aXRlbXMubGVuZ3RoKCkrMX1cIlxuICAgICAgICAgIGl0ZW1zLnB1c2gobmV3IEl0ZW0odGl0bGUpKVxuICAgICAgfSwgJ0FkZCBJdGVtJ1xuXG4gICAgICAjIEVkaXQgc2VsZWN0ZWQgaXRlbVxuICAgICAgICBcbiAgICAgIGVkaXRvciB7XG4gICAgICAgIGl0ZW06IGJpbmQgLT4gY3VycmVudEl0ZW0uZ2V0KClcbiAgICAgICAgb25TdWJtaXQ6IChkYXRhKSAtPlxuICAgICAgICAgIGN1cnJlbnRJdGVtLmdldCgpLmRhdGEuc2V0KGRhdGEpXG4gICAgICB9XG4gICAgXVxuICApXG5cbiMgSW5zdGFudGlhdGUgb3VyIG1haW4gdmlld1xuXG4kKG1haW4pXG4iXX0=
